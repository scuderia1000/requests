import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { loadingPoints, loadingPointsInitialState } from './loadingPointsSlice';
import { unloadingPoints } from './unloadingPointsSlice';
import { points } from './pointsSlice';
// import { fetchCount } from './counterAPI';

const initialState = {
  1: {
    id: 1,
    name: 'Заявка №1',
    loadingPointId: 1,
    unloadingPointId: 6,
  },
  2: {
    id: 2,
    name: 'Заявка №2',
    loadingPointId: 2,
    unloadingPointId: 7,
  },
  3: {
    id: 3,
    name: 'Заявка №3',
    loadingPointId: 3,
    unloadingPointId: 8,
  },
  4: {
    id: 4,
    name: 'Заявка №4',
    loadingPointId: 4,
    unloadingPointId: 9,
  },
  5: {
    id: 5,
    name: 'Заявка №5',
    loadingPointId: 5,
    unloadingPointId: 10,
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const requestsSlice = createSlice({
  name: 'requests',
  initialState,
  reducers: {
    changeLoadingPoint: (state, { payload }) => {
      console.log('payload', payload);
      const { id } = payload;
      state[id] = {
        ...state[id],
        ...payload,
      };
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { changeLoadingPoint, decrement, incrementByAmount } = requestsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const requests = (state) => state.requests;
export const requestsTableData = (state) => Object.keys(state.requests).map(id => {
  const requestData = requests(state)?.[id];
  const pointsData = points(state);
  const loadingPointData = pointsData?.[requestData.loadingPointId];
  const unloadingPointData = pointsData?.[requestData.unloadingPointId];

  return {
    key: id,
    loadingPoint: {
      name: loadingPointData.name,
    },
    unloadingPoint: {
      name: unloadingPointData.name,
    },
    ...requestData,
  };
});

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default requestsSlice.reducer;
